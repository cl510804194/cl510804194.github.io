<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程亮的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-13T07:32:16.455Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回顾ES6</title>
    <link href="http://yoursite.com/2019/08/13/reviewEs6/"/>
    <id>http://yoursite.com/2019/08/13/reviewEs6/</id>
    <published>2019-08-13T07:23:52.000Z</published>
    <updated>2019-08-13T07:32:16.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><ul><li>获取数组中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;];</span><br><span class="line">var [one, two, three] = foo;</span><br><span class="line">console.log(one); // &quot;one&quot;</span><br><span class="line">console.log(two); // &quot;two&quot;</span><br><span class="line">console.log(three); // &quot;three&quot;</span><br></pre></td></tr></table></figure><ul><li>如果要忽略掉某些值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var [first, , , last] = foo;</span><br><span class="line">console.log(first); // &quot;one&quot;</span><br><span class="line">console.log(last); // &quot;four&quot;</span><br></pre></td></tr></table></figure><ul><li>如果没有从数组中拿到值，可以为变量设置一个默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[a=5, b=7] = [1];</span><br><span class="line">console.log(a); // 1</span><br><span class="line">console.log(b); // 7</span><br></pre></td></tr></table></figure><ul><li>交换两数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = 3;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line">console.log(a); // 3</span><br><span class="line">console.log(b); // 1</span><br></pre></td></tr></table></figure><ul><li>获取对象的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const student = &#123;</span><br><span class="line">  name:&apos;Ming&apos;,</span><br><span class="line">  age:&apos;18&apos;,</span><br><span class="line">  city:&apos;Shanghai&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const &#123;name,age,city&#125; = student;</span><br><span class="line">console.log(name); // &quot;Ming&quot;</span><br><span class="line">console.log(age); // &quot;18&quot;</span><br><span class="line">console.log(city); // &quot;Shanghai&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解构赋值&quot;&gt;&lt;a href=&quot;#解构赋值&quot; class=&quot;headerlink&quot; title=&quot;解构赋值&quot;&gt;&lt;/a&gt;解构赋值&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;获取数组中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http学习笔记</title>
    <link href="http://yoursite.com/2019/08/13/learnHTTP/"/>
    <id>http://yoursite.com/2019/08/13/learnHTTP/</id>
    <published>2019-08-13T01:35:39.000Z</published>
    <updated>2019-08-13T02:39:02.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTTP 权威指南学习笔记</p><footer><strong>@woai30231</strong><cite><a href="https://github.com/woai30231/http/tree/master" target="_blank" rel="noopener">github.com/woai30231/http/tree/master</a></cite></footer></blockquote><h2 id="URL-与资源"><a href="#URL-与资源" class="headerlink" title="URL 与资源"></a>URL 与资源</h2><p>URI（统一资源标识符）由 URL（统一资源定位符）和 URN（统一资源名）两个子集构成。</p><h3 id="URL-以位置定位"><a href="#URL-以位置定位" class="headerlink" title="URL 以位置定位"></a>URL 以位置定位</h3><p>URL 是从资源的位置来定义一个资源的，比如在“中国山东的一只小狗”和在“中国广东的一只小狗”就分别定义了两只不同的狗<br>缺点：如果资源的位置发生了改变，那么资源也就找不到了</p><h3 id="URN-以名字定位"><a href="#URN-以名字定位" class="headerlink" title="URN 以名字定位"></a>URN 以名字定位</h3><p>URN 是从资源的名字来定义的，比如小明和小李就分别定义了两个人</p><h3 id="URL-和-URN-对比"><a href="#URL-和-URN-对比" class="headerlink" title="URL 和 URN 对比"></a>URL 和 URN 对比</h3><p>URL 的缺点就是如果资源的位置发生了改变，那么资源也就找不到了，而 URN 正是解决这个问题的，因为 URN 不受位置的限制，它只受名字的管理，因为对于 URN 来说，一个资源的名字是唯一的，所以无论资源移动到什么地方，都能通过名字定位到资源。从某种意义上来说，URN 是 URI 的未来趋势，但是 URN 的实现需要一个中间架构来满足这种位置到名字的映射，所以要完成从 URL 到 URN 的过度，显然是一个工程量的过程，如果不是 URL 到了不能用的时候，URN 的实现需要很长的时间，幸运的是现在 URL 架构还是很好的满足网络需求的！</p><h2 id="URL-的语法"><a href="#URL-的语法" class="headerlink" title="URL 的语法"></a>URL 的语法</h2><p>URL 的语法描述的是 URL 由哪些组件构成，以及这些组件是怎么组合成一个 URL，中间由什么符号连接，每个组件代表什么等！其格式如下：</p><blockquote><p><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</code></p></blockquote><p>其中：<br>scheme:方法描述了请求资源时用了什么协议，用“:”与 url 其它部分隔开；<br>user:用户名描述了访问是带的用户名；<br>password:密码描述了用户名后面可能跟的密码，用“:”跟用户名隔开；<br>host:主机描述了网站主机名或 ip 地址，如果前面有用户名和密码，用@分开；<br>post:服务器当前正在监听的端口，http 默认为 80，https 默认为 443;<br>path:路劲描述了资源在服务器上的位置，用‘/’跟前面部分隔开；<br>params:参数描述了请求需要附加的参数，用“;”与其他部分隔开；<br>query:查询是用来激活服务器程序去执行某些操作，比如查询数据库等，用“?”与其余部分隔开；<br>frag:片段只在客户端使用，不发送到服务器端；</p><a id="more"></a><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="报文的组成部分"><a href="#报文的组成部分" class="headerlink" title="报文的组成部分"></a>报文的组成部分</h3><p>报文由三个部分组成，起始行、首部、主体</p><ul><li>首部<br>说一下首部分类，主要有五类：通用首部、请求首部、响应首部、主体首部、扩展首部。通用首部就是请求报文和响应报文都可以用，用以说明报文的一般属性；请求首部出现在请求报文中，用于客户端告诉服务器是什么情况，比如能接受什么，不能接受什么等；响应报文用于响应报文中，服务器端用来告诉客户端什么情况；主体首部用来描述主体的信息，比如主体的长度是多少等；扩展报文是非官方的报文，但是 http 也支持发送。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="安全方法"><a href="#安全方法" class="headerlink" title="安全方法"></a>安全方法</h4><ul><li>GET 方法用于请求服务器端发送某个资源</li><li>HEAD 方法跟 GET 方法类似，区别就是不返回主体</li><li>PUT 方法用于向服务器端修改、插入数据</li><li>POST 方法用于向服务器端发送数据</li><li>TRACK 方法用于向服务器端请求报文在发送的过程中经过了什么修改，主要用于测试</li><li>OPTIONS 用于请求服务器告知其支持什么功能</li><li>DELETE 用于向服务器删除某个指定的资源</li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><ul><li>100-199 信息性状态码</li><li>200-299 成功状态码 （常见 200 表示请求成功）</li><li>300-399 重定向状态码 （常见 302 重定向）</li><li>400-499 客户端错误状态码 （常见 404，请求资源不存在）</li><li>500-599 服务端错误状态码</li></ul><h3 id="常见首部字段含义介绍"><a href="#常见首部字段含义介绍" class="headerlink" title="常见首部字段含义介绍"></a>常见首部字段含义介绍</h3><ul><li>通用首部</li></ul><table><thead><tr><th>首部</th><th align="center">描述</th></tr></thead><tbody><tr><td>Connection</td><td align="center">允许客户端和服务器指定与请求/响应连接有关的选项</td></tr><tr><td>Date</td><td align="center">提供了日期的时间标志，说明报文是什么时间创建的</td></tr><tr><td>MIME-Version</td><td align="center">给出了发送端使用的 MIME 版本</td></tr><tr><td>Trailer</td><td align="center">如果报文采用了分块传输编码方式，就可以用这个首部列出位于报文拖挂部分的首部集合</td></tr><tr><td>Transfer-Encoding</td><td align="center">告知接收端为了保证报文的可靠传输，对报文采用了什么编码方式</td></tr><tr><td>Update</td><td align="center">给出了发送端可能想要“升级”使用的新版本或协议</td></tr><tr><td>Via</td><td align="center">显示了报文经过的中间节点（代理、网关）</td></tr><tr><td>Cache-Control</td><td align="center">用于随报文传送缓存指示</td></tr><tr><td>Pragma</td><td align="center">另一种随报文传送指示的方式，但并不专用缓存</td></tr></tbody></table><ul><li>请求首部</li></ul><table><thead><tr><th>首部</th><th align="center">描述</th></tr></thead><tbody><tr><td>Client-IP</td><td align="center">提供了运行客户端的机器的 IP 地址</td></tr><tr><td>From</td><td align="center">提供了客户端用户的 E-mail 地址</td></tr><tr><td>Host</td><td align="center">给出了接收请求的服务器的主机名和端口号</td></tr><tr><td>Referer</td><td align="center">提供了包含当前请求 URL 的文档的 URL</td></tr><tr><td>UA-Color</td><td align="center">提供了与客户端显示器的显示颜色有关的信息</td></tr><tr><td>UA-CPU</td><td align="center">给出了客户端 CPU 的类型或制造商</td></tr><tr><td>UA-Disp</td><td align="center">提供了与客户端显示器（屏幕）能力有关的信息</td></tr><tr><td>UA-OS</td><td align="center">给出了运行在客户端机器上的操作系统名称及版本</td></tr><tr><td>UA-Pixels</td><td align="center">提供了客户端显示器的像素信息</td></tr><tr><td>User-Agent</td><td align="center">将发起请求的应用程序名称告知服务器</td></tr><tr><td>Accept</td><td align="center">告诉服务器能够发送那些媒体类型</td></tr><tr><td>Accept-Charset</td><td align="center">告诉服务器能够给发送那些字符集</td></tr><tr><td>Accept-Encoding</td><td align="center">告诉服务器能够发送那些编码方式</td></tr><tr><td>Accept-Language</td><td align="center">告诉服务器能够发送那些语言</td></tr><tr><td>TE</td><td align="center">告诉服务器可以使用那些扩展传输编码</td></tr></tbody></table><ul><li>响应首部</li></ul><table><thead><tr><th>首部</th><th align="center">描述</th></tr></thead><tbody><tr><td>Age</td><td align="center">（从最初创建开始）响应持续时间</td></tr><tr><td>Public</td><td align="center">服务器为其资源支持的请求方法列表</td></tr><tr><td>Retry-After</td><td align="center">如果资源不可用的话，在此日期或时间重试</td></tr><tr><td>Server</td><td align="center">服务器应用程序软件的名称和版本</td></tr><tr><td>Title</td><td align="center">对 HTML 文档来说，就是 HTML 文档的源端给出的标题</td></tr><tr><td>Warning</td><td align="center">比原因短语中更详细的警告报文</td></tr><tr><td>Accept-Ranges</td><td align="center">对此资源来说，服务器可接受的范围类型</td></tr><tr><td>Vary</td><td align="center">服务器查看的其他首部的列表，可能会使响应发生变化；也就是说，这是一个首部列表， 服务器会根据这些首部的内容挑选处最合适的资源版本发送个客户端</td></tr><tr><td>Proxy-Authenticate</td><td align="center">来自代理的对客户端的质询列表</td></tr><tr><td>Set-Cookie</td><td align="center">不是真正的安全首部，但隐含有安全功能；可以在客户端设置一个令牌，以便服务器对客户端进行标志</td></tr><tr><td>Set-Cookie2</td><td align="center">与 Set-Cookie 类似</td></tr><tr><td>WWW-Authenticate</td><td align="center">来自服务器的对客户端的质询列表</td></tr></tbody></table><ul><li><p>实体首部</p><table><thead><tr><th>首部</th><th align="center">描述</th></tr></thead><tbody><tr><td>Content-Base</td><td align="center">解析主体中的相对 URL 时使用的基础 URL</td></tr><tr><td>Content-Encoding</td><td align="center">对主体执行的任意编码方式</td></tr><tr><td>Content-Language</td><td align="center">理解主体时最适宜使用的自然语言</td></tr><tr><td>Content-Length</td><td align="center">主体的长度或者尺寸</td></tr><tr><td>Content-Location</td><td align="center">资源实际所处的位置</td></tr><tr><td>Content-MD5</td><td align="center">主体的 MD5 校验和</td></tr><tr><td>Content-Range</td><td align="center">在整个资源中此实体表示的字节范围</td></tr><tr><td>Content-Type</td><td align="center">这个主体的对象类型</td></tr><tr><td>ETag</td><td align="center">与此实体相关的实体标记</td></tr><tr><td>Expires</td><td align="center">实体不再有效，要从原始的源端再次获取此实体的日期和时间</td></tr><tr><td>Last-Modified</td><td align="center">这个实体最后一次被修改的日期和时间</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;HTTP 权威指南学习笔记&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;@woai30231&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://github.com/woai30231/http/tree/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github.com/woai30231/http/tree/master&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;URL-与资源&quot;&gt;&lt;a href=&quot;#URL-与资源&quot; class=&quot;headerlink&quot; title=&quot;URL 与资源&quot;&gt;&lt;/a&gt;URL 与资源&lt;/h2&gt;&lt;p&gt;URI（统一资源标识符）由 URL（统一资源定位符）和 URN（统一资源名）两个子集构成。&lt;/p&gt;
&lt;h3 id=&quot;URL-以位置定位&quot;&gt;&lt;a href=&quot;#URL-以位置定位&quot; class=&quot;headerlink&quot; title=&quot;URL 以位置定位&quot;&gt;&lt;/a&gt;URL 以位置定位&lt;/h3&gt;&lt;p&gt;URL 是从资源的位置来定义一个资源的，比如在“中国山东的一只小狗”和在“中国广东的一只小狗”就分别定义了两只不同的狗&lt;br&gt;缺点：如果资源的位置发生了改变，那么资源也就找不到了&lt;/p&gt;
&lt;h3 id=&quot;URN-以名字定位&quot;&gt;&lt;a href=&quot;#URN-以名字定位&quot; class=&quot;headerlink&quot; title=&quot;URN 以名字定位&quot;&gt;&lt;/a&gt;URN 以名字定位&lt;/h3&gt;&lt;p&gt;URN 是从资源的名字来定义的，比如小明和小李就分别定义了两个人&lt;/p&gt;
&lt;h3 id=&quot;URL-和-URN-对比&quot;&gt;&lt;a href=&quot;#URL-和-URN-对比&quot; class=&quot;headerlink&quot; title=&quot;URL 和 URN 对比&quot;&gt;&lt;/a&gt;URL 和 URN 对比&lt;/h3&gt;&lt;p&gt;URL 的缺点就是如果资源的位置发生了改变，那么资源也就找不到了，而 URN 正是解决这个问题的，因为 URN 不受位置的限制，它只受名字的管理，因为对于 URN 来说，一个资源的名字是唯一的，所以无论资源移动到什么地方，都能通过名字定位到资源。从某种意义上来说，URN 是 URI 的未来趋势，但是 URN 的实现需要一个中间架构来满足这种位置到名字的映射，所以要完成从 URL 到 URN 的过度，显然是一个工程量的过程，如果不是 URL 到了不能用的时候，URN 的实现需要很长的时间，幸运的是现在 URL 架构还是很好的满足网络需求的！&lt;/p&gt;
&lt;h2 id=&quot;URL-的语法&quot;&gt;&lt;a href=&quot;#URL-的语法&quot; class=&quot;headerlink&quot; title=&quot;URL 的语法&quot;&gt;&lt;/a&gt;URL 的语法&lt;/h2&gt;&lt;p&gt;URL 的语法描述的是 URL 由哪些组件构成，以及这些组件是怎么组合成一个 URL，中间由什么符号连接，每个组件代表什么等！其格式如下：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;frag&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中：&lt;br&gt;scheme:方法描述了请求资源时用了什么协议，用“:”与 url 其它部分隔开；&lt;br&gt;user:用户名描述了访问是带的用户名；&lt;br&gt;password:密码描述了用户名后面可能跟的密码，用“:”跟用户名隔开；&lt;br&gt;host:主机描述了网站主机名或 ip 地址，如果前面有用户名和密码，用@分开；&lt;br&gt;post:服务器当前正在监听的端口，http 默认为 80，https 默认为 443;&lt;br&gt;path:路劲描述了资源在服务器上的位置，用‘/’跟前面部分隔开；&lt;br&gt;params:参数描述了请求需要附加的参数，用“;”与其他部分隔开；&lt;br&gt;query:查询是用来激活服务器程序去执行某些操作，比如查询数据库等，用“?”与其余部分隔开；&lt;br&gt;frag:片段只在客户端使用，不发送到服务器端；&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习</title>
    <link href="http://yoursite.com/2019/08/12/learnNode/"/>
    <id>http://yoursite.com/2019/08/12/learnNode/</id>
    <published>2019-08-12T03:05:52.000Z</published>
    <updated>2019-08-13T06:36:28.079Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 的学习笔记</p><h3 id="创建基类-model"><a href="#创建基类-model" class="headerlink" title="创建基类 model"></a>创建基类 model</h3><p>当成功返回时和失败返回时，返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class BaseModel &#123;</span><br><span class="line">  constructor(data, message) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof data === <span class="string">'string'</span>) &#123;</span><br><span class="line">      this.message = data;</span><br><span class="line">      data = null;</span><br><span class="line">      message = null;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (message) &#123;</span><br><span class="line">      this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class SuccessModel extends BaseModel &#123;</span><br><span class="line">  constructor(data, message) &#123;</span><br><span class="line">    super(data, message);</span><br><span class="line">    this.errno = 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ErrorModel extends BaseModel &#123;</span><br><span class="line">  constructor(data, message) &#123;</span><br><span class="line">    super(data, message);</span><br><span class="line">    this.errno = -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  SuccessModel,</span><br><span class="line">  ErrorModel</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="拆分-URL"><a href="#拆分-URL" class="headerlink" title="拆分 URL"></a>拆分 URL</h3><p>将 url 拆分成一个数组，分成 path 和参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const url = req.url;</span><br><span class="line">req.path = url.split(<span class="string">'?'</span>)[0];</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="创建博客接口"><a href="#创建博客接口" class="headerlink" title="创建博客接口"></a>创建博客接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const handleBlogRouter = (req, res) =&gt; &#123;</span><br><span class="line">  const method = req.method;</span><br><span class="line">  const url = req.url;</span><br><span class="line">  const path = url.split(<span class="string">'?'</span>)[0];</span><br><span class="line">  //获取博客列表</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; path === <span class="string">'/api/blog/list'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是获取博客列表的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取博客详情</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; path === <span class="string">'/api/blog/detail'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是获取博客详情的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //新建一篇博客</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/new'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是新建博客的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //更新一篇博客</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/update'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是更新博客的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //删除一篇博客</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/del'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是删除博客的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exprots = handleBlogRouter</span><br></pre></td></tr></table></figure><h3 id="创建用户接口"><a href="#创建用户接口" class="headerlink" title="创建用户接口"></a>创建用户接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleUserRouter = (req, res) =&gt; &#123;</span><br><span class="line">  const method = req.method;</span><br><span class="line">  const url = req.url;</span><br><span class="line">  const path = url.split(<span class="string">'?'</span>)[0];</span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/user/login'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是登陆的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">module.exprots = handleUserRouter;</span><br></pre></td></tr></table></figure><h3 id="Controler-层-创建数据"><a href="#Controler-层-创建数据" class="headerlink" title="Controler 层 创建数据"></a>Controler 层 创建数据</h3><pre><code>创建完后 在对应的接口地址上，添加逻辑，并创建一个成功的对象</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; req.path === <span class="string">'/api/blog/list'</span>) &#123;</span><br><span class="line">   const author = req.query.author || <span class="string">''</span>;</span><br><span class="line">   console.log(author);</span><br><span class="line">   const keyword = req.query.keyword || <span class="string">''</span>;</span><br><span class="line">   const listData = getList(author, keyword);</span><br><span class="line">   <span class="built_in">return</span> new SuccessModel(listData);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="项目分为如下层"><a href="#项目分为如下层" class="headerlink" title="项目分为如下层"></a>项目分为如下层</h3><h4 id="server-js-服务层"><a href="#server-js-服务层" class="headerlink" title="server.js:服务层"></a>server.js:服务层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const PORT = 8003;</span><br><span class="line">const serverHandle = require(<span class="string">'../app'</span>);</span><br><span class="line">const server = http.createServer(serverHandle);</span><br><span class="line">server.listen(PORT);</span><br></pre></td></tr></table></figure><h4 id="app-js-数据设置层"><a href="#app-js-数据设置层" class="headerlink" title="app.js:数据设置层"></a>app.js:数据设置层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const querystring = require(<span class="string">'querystring'</span>);</span><br><span class="line">const handleBlogRouter = require(<span class="string">'./src/router/blog.js'</span>);</span><br><span class="line">console.log(handleBlogRouter, <span class="string">'handleBlogRouter'</span>);</span><br><span class="line">const handleUserRouter = require(<span class="string">'./src/router/user.js'</span>);</span><br><span class="line"></span><br><span class="line">const serverHandle = (req, res) =&gt; &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">  //获取path</span><br><span class="line">  const url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">'?'</span>)[0];</span><br><span class="line"></span><br><span class="line">  //解析query</span><br><span class="line">  req.query = querystring.parse(url.split(<span class="string">'?'</span>)[0]);</span><br><span class="line">  console.log(req.query);</span><br><span class="line">  const blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (blogData) &#123;</span><br><span class="line">    res.end(JSON.stringify(blogData));</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //处理User路由</span><br><span class="line">  const userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span> (userData) &#123;</span><br><span class="line">    res.end(JSON.stringify(userData));</span><br><span class="line">    <span class="built_in">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  //未命中路由，返回404</span><br><span class="line">  res.writeHead(404, &#123; <span class="string">'Content-type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">  res.write(<span class="string">'404 Not Found\n'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = serverHandle;</span><br></pre></td></tr></table></figure><h4 id="router-js-路由层"><a href="#router-js-路由层" class="headerlink" title="router.js:路由层"></a>router.js:路由层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const handleUserRouter = (req, res) =&gt; &#123;</span><br><span class="line">  const method = req.method;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; req.path === <span class="string">'/api/user/login'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是登陆的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><h4 id="controler-js-数据层"><a href="#controler-js-数据层" class="headerlink" title="controler.js:数据层"></a>controler.js:数据层</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const getList = (author, keyword) =&gt; &#123;</span><br><span class="line">  //先返回假数据</span><br><span class="line">  <span class="built_in">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      id: 1,</span><br><span class="line">      title: <span class="string">'标题A'</span>,</span><br><span class="line">      createTime: 15466104911112,</span><br><span class="line">      author: <span class="string">'程亮'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: 2,</span><br><span class="line">      title: <span class="string">'标题B'</span>,</span><br><span class="line">      createTime: 15466104911112,</span><br><span class="line">      author: <span class="string">'程亮2'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  getList</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现一个回调函数"><a href="#实现一个回调函数" class="headerlink" title="实现一个回调函数"></a>实现一个回调函数</h3><p>callback 方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getFileContent(fileName, callback) &#123;</span><br><span class="line">  const fullFileName = path.resolve(__dirname, <span class="string">'files'</span>, fileName);</span><br><span class="line">  fs.readFile(fullFileName, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      console.log(err);</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    callback(JSON.parse(data.toString()));</span><br><span class="line">    // console.log();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getFileContent(<span class="string">'a.json'</span>, aData =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'a data'</span>, aData);</span><br><span class="line">  getFileContent(aData.next, bData =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'b data'</span>, bData);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>promise 方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getFileContent(fileName) &#123;</span><br><span class="line">  const promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const fullFileName = path.resolve(__dirname, <span class="string">'files'</span>, fileName);</span><br><span class="line">    fs.readFile(fullFileName, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(JSON.parse(data.toString()));</span><br><span class="line">      // console.log();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line">getFileContent(<span class="string">'a.json'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'a data'</span>, res);</span><br><span class="line">    <span class="built_in">return</span> getFileContent(res.next); //要返回一个值，则需要 <span class="built_in">return</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'b data'</span>, res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="使用-promise-接收-post-data"><a href="#使用-promise-接收-post-data" class="headerlink" title="使用 promise 接收 post data"></a>使用 promise 接收 post data</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const getPostData = req =&gt; &#123;</span><br><span class="line">  const promise = new Promise((res, rej) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.method !== <span class="string">'POST'</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'content-type'</span>] !== <span class="string">'application/json'</span>) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> postData = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!postData) &#123;</span><br><span class="line">        resolve(&#123;&#125;);</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(JSON.parse(postData));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="处理-postData"><a href="#处理-postData" class="headerlink" title="处理 postData"></a>处理 postData</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">getPostData(req).then(postData =&gt; &#123;</span><br><span class="line">    req.body = postData;</span><br><span class="line"></span><br><span class="line">    //处理blog路由</span><br><span class="line">    const blogData = handleBlogRouter(req, res);</span><br><span class="line">    if (blogData) &#123;</span><br><span class="line">      res.end(JSON.stringify(blogData));</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //处理User路由</span><br><span class="line">    const userData = handleUserRouter(req, res);</span><br><span class="line">    if (userData) &#123;</span><br><span class="line">      res.end(JSON.stringify(userData));</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    //未命中路由，返回404</span><br><span class="line">    res.writeHead(404, &#123; &apos;Content-type&apos;: &apos;text/plain&apos; &#125;);</span><br><span class="line">    res.write(&apos;404 Not Found\n&apos;);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js 的学习笔记&lt;/p&gt;
&lt;h3 id=&quot;创建基类-model&quot;&gt;&lt;a href=&quot;#创建基类-model&quot; class=&quot;headerlink&quot; title=&quot;创建基类 model&quot;&gt;&lt;/a&gt;创建基类 model&lt;/h3&gt;&lt;p&gt;当成功返回时和失败返回时，返回信息&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class BaseModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(data, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof data === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.message = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      data = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      message = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.message = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class SuccessModel extends BaseModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(data, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(data, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.errno = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class ErrorModel extends BaseModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(data, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super(data, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.errno = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SuccessModel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ErrorModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;拆分-URL&quot;&gt;&lt;a href=&quot;#拆分-URL&quot; class=&quot;headerlink&quot; title=&quot;拆分 URL&quot;&gt;&lt;/a&gt;拆分 URL&lt;/h3&gt;&lt;p&gt;将 url 拆分成一个数组，分成 path 和参数&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const url = req.url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;req.path = url.split(&lt;span class=&quot;string&quot;&gt;&#39;?&#39;&lt;/span&gt;)[0];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
</feed>
